% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/flatten.r
\name{ravel_multi_index}
\alias{ravel_multi_index}
\title{Array indexing}
\usage{
ravel_multi_index(multi_index, dims, order = c("C", "F"))
}
\arguments{
\item{multi_index}{A list of indexes, one element for each dimension.}

\item{dims}{The shape of array into which the indices from \code{multi_index} apply.}

\item{order}{The order in which elements of the array should be read.
By default, the order is equivalent to the \code{C}-style ordering and means elements should be read in row-major order.
In opposite, the \code{Fortran}-style ordering means elements should be read in column-major order.}
}
\value{
An array of indices into the flattened version of an array of dimensions \code{dims}.
}
\description{
Converts a list of indices into an array of flat indices.
}
\details{
This function corresponds to \code{ndarray.ravel_multi_index()} from NumPy (\href{https://numpy.org/doc/stable/reference/generated/numpy.ravel_multi_index.html}{see}).
}
\examples{
# Same examples as for NumPy
ravel_multi_index(multi_index = list(c(4, 7, 7), c(5, 6, 2)), dims = c(7, 6)) - 1 # indexing in Python starts at 0
ravel_multi_index(multi_index = list(c(4, 7, 7), c(5, 6, 2)), dims = c(7, 6), order = "F") - 1
ravel_multi_index(list(4, 2, 5, 2), dims = c(6, 7, 8, 9)) - 1

}
